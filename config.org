
* Load Path

The following contains directories which are added to emac's load path.
That way if you want to configure a package which is not installed using MELPA
but exists in another folder - you can.

N.B. The (add-to-list 'load-path <path>) function DOES NOT 
recursively add subdirectories.

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lisp/")  

#+END_SRC

* Themes

** Custom Theme Directory 

The variable "custom-theme-directory" is the default user directory for
storing custom theme files. The command `customize-create-theme' writes theme
files into this directory.  By default, Emacs searches for custom themes in this
directory first---see `custom-theme-load-path'.

#+BEGIN_SRC emacs-lisp

(setq custom-theme-directory "~/.emacs.d/themes/") ;; For enabling color themes.

#+END_SRC

* Sane Defaults


#+BEGIN_SRC emacs-lisp

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; Do not use tabs - use spaces instead. 
(setq-default indent-tabs-mode nil) 

;; Always confirm when exiting
(setq confirm-kill-emacs 'y-or-n-p) 

;; Highlight pairs of parens
(show-paren-mode 1) 

;; Automatically introduces closing parenthesis, brackets, braces, etc.
(electric-pair-mode 1) 


#+END_SRC

* Customise Settings

Set up the customize file to its own separate file, instead of having emacs
save customise settings in init.el.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Org Mode

#+BEGIN_SRC emacs-lisp

;; Enable syntax highlighting for source code blocks within an org mode file.
(setq org-src-fontify-natively t)

;; For org mode allow using shift to highlight text
;; (setq org-support-shift-select 'always) 


#+END_SRC
* M-x eshell, M-x shell, M-x term, M-x ansi-term
** Opening a shell/terminal

We create two functions: 

| Key Binding | Function Name         | Function Description                                |
|-------------+-----------------------+-----------------------------------------------------|
| C-M-1       | new-shell-same-window | Opens a new shell buffer, replacing the buffer in   |
|             | *custom function*     | the current window.                                 |
| C-M-!       | new-shell-new-window  | Opens a new shell buffer, replacing the buffer in a |
|             | *custom function*     | different window                                    |
| C-M-2       | ansi-term             | Opens an ansi terminal, replacing the buffer in the |
|             | *built in function*   | current window.                                     |


#+BEGIN_SRC emacs-lisp

(defun new-shell-same-window (name)
  "Opens a new shell buffer with the given name in asterisks (*name*) in the current directory and changes the prompt to 'name>'."
  (interactive "sShell in same window. Enter Name: ")
  (pop-to-buffer-same-window (concat "*" name "*"))
  (unless (eq major-mode 'shell-mode)
    (shell (current-buffer))
    (sleep-for 0 200)
    (delete-region (point-min) (point-max))
    (comint-simple-send (get-buffer-process (current-buffer)) 
                        (concat "export PS1=\"\033[33m" name "\033[0m:\033[35m\\W\033[0m>\""))))

;; Binds C-M-1 to open a new shell in the current window.
(global-set-key (kbd "C-M-1") 'new-shell-same-window)

#+END_SRC

#+BEGIN_SRC emacs-lisp

(defun new-shell-new-window (name)
  "Opens a new shell buffer with the given name in asterisks (*name*) in the current directory and changes the prompt to 'name>'."
  (interactive "sShell in new window. Enter Name: ")
  (pop-to-buffer (concat "*" name "*"))
  (unless (eq major-mode 'shell-mode)
    (shell (current-buffer))
    (sleep-for 0 200)
    (delete-region (point-min) (point-max))
    (comint-simple-send (get-buffer-process (current-buffer)) 
                        (concat "export PS1=\"\033[33m" name "\033[0m:\033[35m\\W\033[0m>\""))))

;; Binds C-M-! to open a new shell in a new window.
(global-set-key (kbd "C-M-!") 'new-shell-new-window)

#+END_SRC

#+BEGIN_SRC emacs-lisp

;; C-M-2 opens new ANSI terminal in the current window. 
(global-set-key (kbd "C-M-2") 'ansi-term) 

#+END_SRC



* Frames, Windows, Buffers
** Switching

#+BEGIN_SRC emacs-lisp

;; Move between windows: ;;
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)

#+END_SRC
